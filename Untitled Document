class PagesController < ApplicationController
  def home
  	read_moves
  end
  def read_moves
  	@moves = Move.all
  end
  def add_move
  	mo  = Move.new(rc: params[:rc],value: 0)
  	mo.save
  	read_moves
  	p_moves = []
  	m_moves = []
  	@moves.each do |m|
  		if m.value == 0
  		p_moves << m.rc 	
  		else
  		m_moves << m.rc	
  		end
  	end

    almoves = [11,12,13,21,22,23,31,32,33] - p_moves - m_moves
    next_move = almoves.sample

  	c = mo.rc % 10
  	r = mo.rc / 10
    next_move = check_moves(r,c , p_moves , m_moves , next_move)
    if @moves.size > 3
    last = Move.where("value = 1").last
    c = last.rc % 10
    r = last.rc / 10
    next_move = check_moves(r,c,p_moves,m_moves,next_move,false)  
    end
    m  = Move.new(game_id: 1,rc: next_move,value: 1)
  	m.save	

  	redirect_to root_path

  end

  def clear
  read_moves
  @moves.each do |m|
    m.delete
  end
  redirect_to root_path
  end

  def check_moves(r = "", c = "" , p_moves = [] , m_moves = [] , next_move = "",player = true)
    hmoves = [1,2,3]
    h = 0
    hmoves.delete(c)
    hmoves.each  do |m| 
    rc = "#{r}#{m}".to_i
    if p_moves.include?(rc)
    hmoves.delete(m)  
    h = h + 1 if player
    h = h - 2 if not player
    end
    if m_moves.include?(rc)
    h = h - 3 if player
    h = h + 1 if not player
    end
    end

    if h > 0 
    next_move = "#{r}#{hmoves[0]}"
    end

    vmoves = [1,2,3]
    vmoves.delete(r)
    v = 0
    vmoves.each  do |m| 
    cr = "#{m}#{c}".to_i  
    if p_moves.include?(cr)
    vmoves.delete(m)  
    v = v  + 1 if player
    v = v - 2 if not player
    end
    if m_moves.include?(cr)
    v = v - 3 if player
    v = v + 1 if not player
    end
    end

    if v > 0 
    next_move = "#{vmoves[0]}#{c}"
    end

    rc = "#{r}#{c}".to_i
    dmoves = [11,22,33]
    if dmoves.include?(rc)
    dmoves.delete(rc)
    d = 0
    dmoves.each  do |m| 
    if p_moves.include?(m)
    dmoves.delete(m)  
    d = d  + 1 if player
    d = d - 2 if not player
    end
    if m_moves.include?(m)
    d = d - 3 if player
    d = d + 1 if not player
    end
    end

    if d > 0 
    next_move = "#{dmoves[0]}"
    end

    end


    admoves = [31,22,13]
    if admoves.include?(rc)
    admoves.delete(rc)
    ad = 0
    admoves.each  do |m| 
    if p_moves.include?(m)
    admoves.delete(m)  
    ad = ad  + 1 if player
    ad = ad - 2 if not player
    end
    if m_moves.include?(m)
    ad = ad - 3 if player
    ad = ad + 1 if not player
    end
    end

    if ad > 0 
    next_move = "#{admoves[0]}"
    end
    end
    
    return next_move  
  end
end

